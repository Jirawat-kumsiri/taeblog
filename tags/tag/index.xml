<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tag on Teiiz</title>
    <link>https://teiiz.com/tags/tag/</link>
    <description>Recent content in Tag on Teiiz</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>© Athul</copyright>
    <lastBuildDate>Wed, 06 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://teiiz.com/tags/tag/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Title of the post</title>
      <link>https://teiiz.com/posts/robocon-2024---how-to-overcome-pitfalls-in-automation/</link>
      <pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://teiiz.com/posts/robocon-2024---how-to-overcome-pitfalls-in-automation/</guid>
      <description>&lt;h2 id=&#34;summary&#34;&gt;SUMMARY&lt;/h2&gt;&#xA;&lt;p&gt;Guido and Frank discuss their lessons from implementing and improving test automation using Robot Framework over years, emphasizing best practices and conventions.&lt;/p&gt;&#xA;&lt;h2 id=&#34;ideas&#34;&gt;IDEAS&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Effective automation starts with organizing test cases and separating reusable components into resource files.&lt;/li&gt;&#xA;&lt;li&gt;Avoid direct communication between test cases and the system; use intermediary resource files.&lt;/li&gt;&#xA;&lt;li&gt;Logical separation of files, such as screens, common actions, and shared functionality, enhances maintainability.&lt;/li&gt;&#xA;&lt;li&gt;Keep resource files compact, readable, and maintainable by splitting large functionalities into smaller files.&lt;/li&gt;&#xA;&lt;li&gt;Centralize locators within single-action keywords to minimize duplication and reduce locator management complexity.&lt;/li&gt;&#xA;&lt;li&gt;Composite keywords should check their completion status to ensure subsequent tests run without errors.&lt;/li&gt;&#xA;&lt;li&gt;Start each keyword with validation to confirm the proper context or screen before execution.&lt;/li&gt;&#xA;&lt;li&gt;Naming conventions for single-action keywords aid clarity and understanding in test suites.&lt;/li&gt;&#xA;&lt;li&gt;Separate technical details and business logic into distinct layers for clarity and stakeholder involvement.&lt;/li&gt;&#xA;&lt;li&gt;Stakeholder-friendly &amp;ldquo;business object&amp;rdquo; resource files should focus on functional, non-technical details.&lt;/li&gt;&#xA;&lt;li&gt;Technical details, like locators and logic, belong in &amp;ldquo;page object&amp;rdquo; resource files.&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Assertion layer&amp;rdquo; ensures functional correctness without cluttering business objects.&lt;/li&gt;&#xA;&lt;li&gt;Prefix validation keywords with clear terms like &amp;ldquo;validate&amp;rdquo; to distinguish them in tests.&lt;/li&gt;&#xA;&lt;li&gt;Use directory-level test execution to organize and manage extensive end-to-end test setups.&lt;/li&gt;&#xA;&lt;li&gt;Split long end-to-end tests into modular test suites for flexibility and easier debugging.&lt;/li&gt;&#xA;&lt;li&gt;Keep setup and teardown logic outside test suites for clarity in specific test validations.&lt;/li&gt;&#xA;&lt;li&gt;Maintain stakeholder involvement by using their language in business layer test definitions.&lt;/li&gt;&#xA;&lt;li&gt;Utilize prefixes in resource file keywords to resolve ambiguous names and improve readability.&lt;/li&gt;&#xA;&lt;li&gt;Collaborate with developers to avoid the need for dynamic locators, simplifying automation.&lt;/li&gt;&#xA;&lt;li&gt;Domain language capture in the business layer facilitates alignment between testers and stakeholders.&lt;/li&gt;&#xA;&lt;li&gt;Modular testing ensures resilience against system changes by isolating specific functionalities.&lt;/li&gt;&#xA;&lt;li&gt;Define conventions for layer separation to enable maintainable and scalable test frameworks.&lt;/li&gt;&#xA;&lt;li&gt;Use consistent naming for validation steps to streamline debugging and stakeholder understanding.&lt;/li&gt;&#xA;&lt;li&gt;Dynamic fields can be handled with title-based locators or parametrized validations.&lt;/li&gt;&#xA;&lt;li&gt;JSON transfers between systems help align real-world application interactions and test automation.&lt;/li&gt;&#xA;&lt;li&gt;Modular test files ease switching components when applications are temporarily unavailable.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;insights&#34;&gt;INSIGHTS&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Separation of business logic and technical details builds frameworks readable for both testers and stakeholders.&lt;/li&gt;&#xA;&lt;li&gt;Modularization and logical resource file organization ensure long-term test maintainability and clarity.&lt;/li&gt;&#xA;&lt;li&gt;Collaboration with developers reduces automation complexity and improves locator stability.&lt;/li&gt;&#xA;&lt;li&gt;Business layer clarity fosters better communication and alignment between technical and non-technical teams.&lt;/li&gt;&#xA;&lt;li&gt;Validation at every step prevents silent failures and ensures more robust test outcomes.&lt;/li&gt;&#xA;&lt;li&gt;Prefixes in keyword naming avoid ambiguities and improve framework scalability.&lt;/li&gt;&#xA;&lt;li&gt;Layered architecture facilitates parallel test case development and system readiness checks.&lt;/li&gt;&#xA;&lt;li&gt;Assertions should be explicit and clearly identified to improve test integrity and results clarity.&lt;/li&gt;&#xA;&lt;li&gt;End-to-end tests should be modular, not monolithic, for resilience and easier maintenance.&lt;/li&gt;&#xA;&lt;li&gt;Stakeholder language integration in business layers builds trust and improves test case relevance.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;quotes&#34;&gt;QUOTES&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&amp;ldquo;The fastest way to drop jaws is showing manual testers automated clicks.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Keywords must finish themselves to ensure the next ones won’t fail prematurely.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Keep resource files compact, readable, and maintainable by splitting larger functionalities.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;The business object layer should only contain functional descriptions stakeholders understand.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Ambiguous keywords are a nightmare; use naming prefixes to resolve conflicts.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Validation steps must ensure system correctness without cluttering the business layer.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Stakeholders should not look at us like rabbits before an 18-ton truck.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Separate technical details from functionality to make test cases readable by stakeholders.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Test cases should end with validation keywords to confirm they achieved their purpose.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Dynamic locators should be avoided whenever possible through collaboration with developers.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Composite keywords must check if actions are complete before moving on.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Resource files must align with business layers for clarity and modularity.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Assertions are for testers, while business objects cater to stakeholder understanding.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Layer separation facilitates simultaneous test case creation and system readiness testing.&amp;rdquo;&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;Organize long end-to-end tests into modular files for flexibility and clarity.&amp;rdquo;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;habits&#34;&gt;HABITS&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Collaborate with developers early to simplify automation and avoid dynamic locators.&lt;/li&gt;&#xA;&lt;li&gt;Use clear naming conventions for single-action and composite keywords to improve clarity.&lt;/li&gt;&#xA;&lt;li&gt;Validate each test keyword’s context and outcome before advancing to the next step.&lt;/li&gt;&#xA;&lt;li&gt;Modularize tests into small, maintainable resource files for easier debugging and updates.&lt;/li&gt;&#xA;&lt;li&gt;Separate technical complexities into page objects to reduce stakeholder confusion.&lt;/li&gt;&#xA;&lt;li&gt;Use logical naming prefixes for keywords and files to resolve potential ambiguities.&lt;/li&gt;&#xA;&lt;li&gt;Align test terminology with stakeholder language to ensure mutual understanding.&lt;/li&gt;&#xA;&lt;li&gt;Create assertions as separate validation layers to confirm functional correctness.&lt;/li&gt;&#xA;&lt;li&gt;Modularize end-to-end tests into smaller test suites for scalability and resilience.&lt;/li&gt;&#xA;&lt;li&gt;Reserve test setup and teardown actions for designated files outside the core tests.&lt;/li&gt;&#xA;&lt;li&gt;Prefix assertion keywords with terms like “validate” for immediate recognition.&lt;/li&gt;&#xA;&lt;li&gt;Consolidate locator usage within keywords to reduce redundancy and errors.&lt;/li&gt;&#xA;&lt;li&gt;Develop tests incrementally to parallelize work on system readiness and test case creation.&lt;/li&gt;&#xA;&lt;li&gt;Utilize consistent conventions for page and business object layers to enhance readability.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;facts&#34;&gt;FACTS&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Robot Framework allows modularization through resource file organization for better test management.&lt;/li&gt;&#xA;&lt;li&gt;Test locators can often be simplified by avoiding dynamic parameters with developer collaboration.&lt;/li&gt;&#xA;&lt;li&gt;Stakeholders may find technical test scripts overwhelming without functional abstraction layers.&lt;/li&gt;&#xA;&lt;li&gt;Composite keywords must ensure their completion status before the next test step begins.&lt;/li&gt;&#xA;&lt;li&gt;Modular test frameworks enable switching out unavailable or incomplete system components.&lt;/li&gt;&#xA;&lt;li&gt;Validation steps are vital for ensuring test outcomes reflect real system behavior.&lt;/li&gt;&#xA;&lt;li&gt;JSON is often used for system-to-system data transfer in end-to-end tests.&lt;/li&gt;&#xA;&lt;li&gt;Consistent naming conventions in test frameworks improve scalability and reduce ambiguity.&lt;/li&gt;&#xA;&lt;li&gt;Modularized end-to-end testing eases debugging and reduces system interdependencies.&lt;/li&gt;&#xA;&lt;li&gt;Prefixes like &amp;ldquo;validate&amp;rdquo; distinguish validation steps from core test actions.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;references&#34;&gt;REFERENCES&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Robot Framework documentation and best practices.&lt;/li&gt;&#xA;&lt;li&gt;JSON as a format for system-to-system communication.&lt;/li&gt;&#xA;&lt;li&gt;Giren language concepts for capturing stakeholder language in test layers.&lt;/li&gt;&#xA;&lt;li&gt;Page Object and Business Object design patterns in test automation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;one-sentence-takeaway&#34;&gt;ONE-SENTENCE TAKEAWAY&lt;/h2&gt;&#xA;&lt;p&gt;Effective test automation frameworks rely on clear modularization, stakeholder alignment, and robust conventions for maintainability.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
